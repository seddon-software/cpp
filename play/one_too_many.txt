%CODE
void   main(void)
{
    int   i;
    int   a[6];

    for(i = 0; i <= 6; i++) {
        printf("%%d\n", i);
        a[i] = 0;
    }
}
%INSTRUCTIONS
GLOBAL STACK_COL 50
GLOBAL MESSAGE_ROW 25
GLOBAL MESSAGE_COL 40
GLOBAL VALUE_COL 54
GLOBAL VARIABLE_COL 62
GLOBAL CODE_COL 5
LOAD CODE
LOAD STACK 7

# set up stack variables
PUSH_NEW i
PUSH_NEW a[5]
PUSH_NEW a[4]
PUSH_NEW a[3]
PUSH_NEW a[2]
PUSH_NEW a[1]
PUSH_NEW a[0]

CODE 1
MESSAGE PUSH local variables (uninitialized)
CODE 3
VALUE i 3416
CODE 4
VALUE a[5] 479
VALUE a[4] -31
VALUE a[3] 20979
VALUE a[2] 451
VALUE a[1] -73
VALUE a[0] 4185

MESSAGE loop
CODE 6
MESSAGE
VALUE i 0
CODE 7
MESSAGE 0
CODE 8
VALUE a[0] 0
MESSAGE loop again

CODE 6
MESSAGE
VALUE i 1

CODE 7
MESSAGE 1
CODE 8
VALUE a[1] 0

CODE 6
MESSAGE
VALUE i 2
CODE 7
MESSAGE 2
CODE 8
VALUE a[2] 0

CODE 6
MESSAGE
VALUE i 3
CODE 7
MESSAGE 3
CODE 8
VALUE a[3] 0

CODE 6
MESSAGE
VALUE i 4

CODE 7
MESSAGE 4
CODE 8
VALUE a[4] 0

CODE 6
MESSAGE
VALUE i 5
CODE 7
MESSAGE 5
CODE 8
VALUE a[5] 0

CODE 6
MESSAGE
VALUE i 6
CODE 7
MESSAGE 6
CODE 8
VALUE i 0
MESSAGE oops - overwritten i

CODE 6
MESSAGE
VALUE i 1
CODE 7
MESSAGE 1
CODE 8

CODE 6
MESSAGE
VALUE i 2
CODE 7
MESSAGE 2
CODE 8

CODE 6
MESSAGE
VALUE i 3
CODE 7
MESSAGE 3
CODE 8

CODE 6
MESSAGE
VALUE i 4
CODE 7
MESSAGE 4
CODE 8

MESSAGE and so on ...
WAIT
MESSAGE FINISH
WAIT
%END
