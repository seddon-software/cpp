%CODE
void   main(void)
{
    int   i;
    int   a[6];

    for(i = 0; i <= 6; i++) {
        printf("%%d\n", i);
        a[i] = 0;
    }
}
%INSTRUCTIONS
GLOBAL STACK_COL 50
GLOBAL MESSAGE_ROW 25
GLOBAL MESSAGE_COL 50
GLOBAL VALUE_COL 54
GLOBAL VARIABLE_COL 62
GLOBAL CODE_COL 5
LOAD CODE
LOAD STACK 7
CODE 1
MESSAGE BEGIN
CODE 3
MESSAGE push local variable
CODE 4
PUSH_NEW i
VALUE i ---
MESSAGE push local array
CODE 6
PUSH_NEW a[5]
PUSH_NEW a[4]
PUSH_NEW a[3]
PUSH_NEW a[2]
PUSH_NEW a[1]
PUSH_NEW a[0]
VALUE a[5] ---
VALUE a[4] ---
VALUE a[3] ---
VALUE a[2] ---
VALUE a[1] ---
VALUE a[0] ---

MESSAGE start loop
VALUE i 0
CODE 7
MESSAGE
CODE 8
MESSAGE 0
CODE 9
VALUE a[0] 0
MESSAGE
CODE 6

MESSAGE loop again
VALUE i 1
CODE 7
MESSAGE
CODE 8
MESSAGE 1
CODE 9
VALUE a[1] 0
MESSAGE
CODE 6

MESSAGE loop again
VALUE i 2
CODE 7
MESSAGE
CODE 8
MESSAGE 2
CODE 9
VALUE a[2] 0
MESSAGE
CODE 6

MESSAGE loop again
VALUE i 3
CODE 7
MESSAGE
CODE 8
MESSAGE 3
CODE 9
VALUE a[3] 0
MESSAGE
CODE 6

MESSAGE loop again
VALUE i 4
CODE 7
MESSAGE
CODE 8
MESSAGE 4
CODE 9
VALUE a[4] 0
MESSAGE
CODE 6

MESSAGE loop again
VALUE i 5
CODE 7
MESSAGE
CODE 8
MESSAGE 5
CODE 9
VALUE a[5] 0
MESSAGE
CODE 6

MESSAGE loop again because i <= 6
MESSAGE increment i
VALUE i 6
CODE 7
MESSAGE
CODE 8
MESSAGE 6
MESSAGE a[6] will coincide with i
MESSAGE initialise "a[6] = 0" aka i
CODE 9
VALUE i 0
MESSAGE loop again because i has been reset and i <= 6

CODE 6
VALUE i 1
MESSAGE
CODE 7
MESSAGE
CODE 8
MESSAGE 1
CODE 9
MESSAGE we'll keep looping forever because i keeps being reset

CODE 6
VALUE i 2
MESSAGE
CODE 7
MESSAGE
CODE 8
MESSAGE 2
CODE 9
MESSAGE

CODE 6
VALUE i 3
MESSAGE
CODE 7
MESSAGE
CODE 8
MESSAGE 3
CODE 9
MESSAGE

MESSAGE and so on ...

MESSAGE FINISH

%END
