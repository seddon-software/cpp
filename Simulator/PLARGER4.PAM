%**************************************************************************
%**************************************************************************
%**                                                                      **
%**         script to demonstrate the non working of the plarger()       **
%**         function mentioned in the C course labs for chapter 12       **
%**                                                                      **
%**************************************************************************
%**************************************************************************

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Initially override a few in-built parameters
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
setstacktop 6
setstackbottom 22
setstackwidth 13
setstackleft 19
setmargin 8
setmessagetextcolour brightGreen

alias displaycentredmessage M

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Now for the program text to be displayed on the right hand side of
% the screen. After "programtext" everything is read until a line whose
% first character starts with a "*" (the first non blank after programtext)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
programtext *****************************************************************

int*   p_larger(int*, int*);

void   main(void)
{
       int   *p, x = 9, y = 12;

       p = p_larger(&x, &y);
       printf("%d\n", *p);
}

int*   p_larger(int* p1, int* p2)
{
       int *ans;
 
       *ans = (*p1 > *p2) ? *p1 : *p2;
       return ans;
}
****************** this is the end of the program text **********************

clearscreen
displaystack
displaytext
pause

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Enter main and build the stack. Three local variables all declared on
% one line
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   highlightline 5
   M main has 3 local variables p (uninitialised), x (9) and y (12)
pause
   labelstack 1 main.p
   onstack - ?
delay 100
   labelstack 2 main.x
   onstack - 9
delay 100
   labelstack 3 main.y
   onstack - 12
   M to make things simpler lets give x and y addresses
pause
   labelstack 2 1D6A0 main.x
delay 100
   labelstack 3 1D6A2 main.y
   M the actual address values are not important
pause

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Now, set up to call the p_larger function with the addresses of x and y.
% A red colour is used for the addresses to show that they are addresses
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

   movehighlightline +2
   M now copy the addresses of "x" and "y" onto the stack
pause
   setstacktextcolour brightRed
   onstack 4 1D6A2
delay 100
   onstack 5 1D6A0
   setstacktextcolour
pause
   M the p_larger function picks up two parameters "p1" and "p2"
   movehighlightline +4
pause

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% thats the calling over with, now the naming
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   labelstack 5 p_larger.p1
delay 100
   labelstack 4 p_larger.p2
pause

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Move into the p_larger function, one local variable. It goes on the stack,
% has a random value, since it is a pointer variable we're not concerned
% with its address, only its value
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   movehighlightline +2
   M p_larger has one local variable, "ans", which is initially random
pause
   onstack 6 ?
   labelstack - p_larger.ans
pause
   movehighlightline +2
   M p1 points to x containing 9, p2 points to y containing 12
pause
   M the greater of these is y containing 12
pause
   M the 12 is written into what "ans" points to
   setstacktextcolour flashingBrightRed
   onstack 6 ?
pause
   M but what does "ans" point to ?
pause
   setstacktextcolour brightRed
   onstack 6 ?
   M the problem is that we're overwriting a random piece of memory
pause
   transfer 3 12 10 12
   transfer 12 0 10 12
   M where does the 12 go ?
pause

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Return the random value stored in "ans". Destroy ans and the parameters.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   sethighlightcolour brightRed
   movehighlightline +1
   sethighlightcolour
   M having overwritten this piece of memory its address is returned
   setstacktextcolour brightRed
   setlabelcolour brightRed
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% set up a return box
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   setstacktop 2
   setstackbottom 4
   setstackdrawingcolour brightCyan
   displaystack
   setstacktop 6
   setstackbottom 22

   labelstack 10 return
   onstack 10 ?
   setlabelcolour
   setstacktextcolour
pause
   M on returning, the local variable is destroyed
pause
   labelstack 6
   onstack -
pause
   movehighlightline -9
   M main destroys the two parameters
pause
   labelstack 4
   onstack -
   labelstack 5
   onstack -
pause
   M the returned value is copied into "p"
pause
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   % reset the delay back to its default, otherwise the ? will zoom around the
   % screen at a high rate of knots !
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   setdelay
   transfer 10 1 -4 ?

   labelstack 10
   onstack 10
   clearstackarea 2 4

   setstacktextcolour brightGreen
   onstack 1 ?
   setstacktextcolour
pause

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The damage is done. Now put out lots of explainations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   movehighlightline +1
   M now print out whatever it is that "p" points to
pause
   M since we've overwritten it, it will contain the 12 we expect
pause
   M the problem is the damage has already been done
pause
   M maybe it was a bit of DOS we overwrote
pause
   M will the DOS prompt appear when the program stops ?
pause
   M I'll leave you to find out
pause
   lowlightline -
   labelstack 6
   labelstack 1
   onstack -
   labelstack 2
   onstack -
   labelstack 3
   onstack -
pause
